



<!DOCTYPE html>
<html lang="en" class="">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Language" content="en">
    
    
    <title>ProtoBuf.js/ProtoBuf.noparse.min.js at master Â· dcodeIO/ProtoBuf.js</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png">
    <meta property="fb:app_id" content="1401488693436528">

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="dcodeIO/ProtoBuf.js" name="twitter:title" /><meta content="ProtoBuf.js - Protocol Buffers for JavaScript. Finally." name="twitter:description" /><meta content="https://avatars3.githubusercontent.com/u/1136893?v=2&amp;s=400" name="twitter:image:src" />
<meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars3.githubusercontent.com/u/1136893?v=2&amp;s=400" property="og:image" /><meta content="dcodeIO/ProtoBuf.js" property="og:title" /><meta content="https://github.com/dcodeIO/ProtoBuf.js" property="og:url" /><meta content="ProtoBuf.js - Protocol Buffers for JavaScript. Finally." property="og:description" />

      <meta name="browser-stats-url" content="/_stats">
    <link rel="assets" href="https://assets-cdn.github.com/">
    <link rel="conduit-xhr" href="https://ghconduit.com:25035">
    <link rel="xhr-socket" href="/_sockets">

    <meta name="msapplication-TileImage" content="/windows-tile.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="selected-link" value="repo_source" data-pjax-transient>
      <meta name="google-analytics" content="UA-3769691-2">

    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="8EFE1D07:13AD:9D12BF7:541F0D8C" name="octolytics-dimension-request_id" /><meta content="379372" name="octolytics-actor-id" /><meta content="ConnorDoyle" name="octolytics-actor-login" /><meta content="a12777e6fe892d16ff184e7d231e2c5875dff273cddb4d4ea6712e7f5e581a03" name="octolytics-actor-hash" />
    <meta content="Rails, view, blob#show" name="analytics-event" />

    
    
    <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico">


    <meta content="authenticity_token" name="csrf-param" />
<meta content="UlvKCRl6DD/cQyt5cu2/2jEiH5GV8nKI3tOoCq3rwnTfvbgNmpy1XJ7O3WUZm+wbZxRGA3m9q+V7q3q9amCz9g==" name="csrf-token" />

    <link href="https://assets-cdn.github.com/assets/github-b83b8eb08bbe9393c7a5d777e6a86ffe4372ab2d.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://assets-cdn.github.com/assets/github2-6974f31de378b725bc92bba2de583f0def78777d.css" media="all" rel="stylesheet" type="text/css" />
    


    <meta http-equiv="x-pjax-version" content="5250183d2ac940b525622a112ad95e8b">

      
  <meta name="description" content="ProtoBuf.js - Protocol Buffers for JavaScript. Finally.">
  <meta name="go-import" content="github.com/dcodeIO/ProtoBuf.js git https://github.com/dcodeIO/ProtoBuf.js.git">

  <meta content="1136893" name="octolytics-dimension-user_id" /><meta content="dcodeIO" name="octolytics-dimension-user_login" /><meta content="8507859" name="octolytics-dimension-repository_id" /><meta content="dcodeIO/ProtoBuf.js" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="8507859" name="octolytics-dimension-repository_network_root_id" /><meta content="dcodeIO/ProtoBuf.js" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/dcodeIO/ProtoBuf.js/commits/master.atom" rel="alternate" title="Recent Commits to ProtoBuf.js:master" type="application/atom+xml">

  </head>


  <body class="logged_in  env-production macintosh vis-public page-blob">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>
    <div class="wrapper">
      
      
      
      


      <div class="header header-logged-in true">
  <div class="container clearfix">

    <a class="header-logo-invertocat" href="https://github.com/" aria-label="Homepage" ga-data-click="Header, go to dashboard, icon:logo">
  <span class="mega-octicon octicon-mark-github"></span>
</a>


      <div class="site-search repo-scope js-site-search">
          <form accept-charset="UTF-8" action="/dcodeIO/ProtoBuf.js/search" class="js-site-search-form" data-global-search-url="/search" data-repo-search-url="/dcodeIO/ProtoBuf.js/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
  <input type="text"
    class="js-site-search-field is-clearable"
    data-hotkey="s"
    name="q"
    placeholder="Search"
    data-global-scope-placeholder="Search GitHub"
    data-repo-scope-placeholder="Search"
    tabindex="1"
    autocapitalize="off">
  <div class="scope-badge">This repository</div>
</form>
      </div>
      <ul class="header-nav left">
        <li class="header-nav-item explore">
          <a class="header-nav-link" href="/explore" data-ga-click="Header, go to explore, text:explore">Explore</a>
        </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="https://gist.github.com" data-ga-click="Header, go to gist, text:gist">Gist</a>
          </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="/blog" data-ga-click="Header, go to blog, text:blog">Blog</a>
          </li>
        <li class="header-nav-item">
          <a class="header-nav-link" href="https://help.github.com" data-ga-click="Header, go to help, text:help">Help</a>
        </li>
      </ul>

    
<ul class="header-nav user-nav right" id="user-links">
  <li class="header-nav-item dropdown js-menu-container">
    <a class="header-nav-link name" href="/ConnorDoyle" data-ga-click="Header, go to profile, text:username">
      <img alt="Connor Doyle" class="avatar" data-user="379372" height="20" src="https://avatars2.githubusercontent.com/u/379372?v=2&amp;s=40" width="20" />
      <span class="css-truncate">
        <span class="css-truncate-target">ConnorDoyle</span>
      </span>
    </a>
  </li>

  <li class="header-nav-item dropdown js-menu-container">
    <a class="header-nav-link js-menu-target tooltipped tooltipped-s" href="#" aria-label="Create new..." data-ga-click="Header, create new, icon:add">
      <span class="octicon octicon-plus"></span>
      <span class="dropdown-caret"></span>
    </a>

    <div class="dropdown-menu-content js-menu-content">
      
<ul class="dropdown-menu">
  <li>
    <a href="/new"><span class="octicon octicon-repo"></span> New repository</a>
  </li>
  <li>
    <a href="/organizations/new"><span class="octicon octicon-organization"></span> New organization</a>
  </li>


    <li class="dropdown-divider"></li>
    <li class="dropdown-header">
      <span title="dcodeIO/ProtoBuf.js">This repository</span>
    </li>
      <li>
        <a href="/dcodeIO/ProtoBuf.js/issues/new"><span class="octicon octicon-issue-opened"></span> New issue</a>
      </li>
</ul>

    </div>
  </li>

  <li class="header-nav-item">
        <a href="/notifications" aria-label="You have unread notifications" class="header-nav-link notification-indicator tooltipped tooltipped-s" data-ga-click="Header, go to notifications, icon:unread" data-hotkey="g n">
        <span class="mail-status unread"></span>
        <span class="octicon octicon-inbox"></span>
</a>
  </li>

  <li class="header-nav-item">
    <a class="header-nav-link tooltipped tooltipped-s" href="/settings/profile" id="account_settings" aria-label="Settings" data-ga-click="Header, go to settings, icon:settings">
      <span class="octicon octicon-gear"></span>
    </a>
  </li>

  <li class="header-nav-item">
    <form accept-charset="UTF-8" action="/logout" class="logout-form" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="K5WnZf0x/ozC0vdeNQAWtHbobDohvbkES7oToixjdNp/a7an22FdStcZi5e6Y6omS/FssD6mi80D3FoqKco5rQ==" /></div>
      <button class="header-nav-link sign-out-button tooltipped tooltipped-s" aria-label="Sign out" data-ga-click="Header, sign out, icon:logout">
        <span class="octicon octicon-sign-out"></span>
      </button>
</form>  </li>

</ul>


    
  </div>
</div>

      

        


      <div id="start-of-content" class="accessibility-aid"></div>
          <div class="site" itemscope itemtype="http://schema.org/WebPage">
    <div id="js-flash-container">
      
    </div>
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">
        
<ul class="pagehead-actions">

    <li class="subscription">
      <form accept-charset="UTF-8" action="/notifications/subscribe" class="js-social-container" data-autosubmit="true" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="sdXf0wEaX8DS1ggWqry9UXidJ8d33wVkv1cgpDQ9OqoBjUXC/Ya02OLHYikORuHvrxDWQmXVo7mLHXAThal2Qw==" /></div>  <input id="repository_id" name="repository_id" type="hidden" value="8507859" />

    <div class="select-menu js-menu-container js-select-menu">
      <a class="social-count js-social-count" href="/dcodeIO/ProtoBuf.js/watchers">
        51
      </a>
      <a href="/dcodeIO/ProtoBuf.js/subscription"
        class="minibutton select-menu-button with-count js-menu-target" role="button" tabindex="0" aria-haspopup="true">
        <span class="js-select-button">
          <span class="octicon octicon-eye"></span>
          Watch
        </span>
      </a>

      <div class="select-menu-modal-holder">
        <div class="select-menu-modal subscription-menu-modal js-menu-content" aria-hidden="true">
          <div class="select-menu-header">
            <span class="select-menu-title">Notifications</span>
            <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
          </div> <!-- /.select-menu-header -->

          <div class="select-menu-list js-navigation-container" role="menu">

            <div class="select-menu-item js-navigation-item selected" role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input checked="checked" id="do_included" name="do" type="radio" value="included" />
                <h4>Not watching</h4>
                <span class="description">Be notified when participating or @mentioned.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye"></span>
                  Watch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_subscribed" name="do" type="radio" value="subscribed" />
                <h4>Watching</h4>
                <span class="description">Be notified of all conversations.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye"></span>
                  Unwatch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_ignore" name="do" type="radio" value="ignore" />
                <h4>Ignoring</h4>
                <span class="description">Never be notified.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-mute"></span>
                  Stop ignoring
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

          </div> <!-- /.select-menu-list -->

        </div> <!-- /.select-menu-modal -->
      </div> <!-- /.select-menu-modal-holder -->
    </div> <!-- /.select-menu -->

</form>
    </li>

  <li>
    
  <div class="js-toggler-container js-social-container starring-container ">

    <form accept-charset="UTF-8" action="/dcodeIO/ProtoBuf.js/unstar" class="js-toggler-form starred js-unstar-button" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="CJpzMw+d4SDKftkjqLwEWLM+NPrpi26Atragnv9Z3fr0nTOzGv633DM1ot3ezpVEtiJABMmsotgEQH3JLBIN2A==" /></div>
      <button
        class="minibutton with-count js-toggler-target star-button"
        aria-label="Unstar this repository" title="Unstar dcodeIO/ProtoBuf.js">
        <span class="octicon octicon-star"></span>
        Unstar
      </button>
        <a class="social-count js-social-count" href="/dcodeIO/ProtoBuf.js/stargazers">
          656
        </a>
</form>
    <form accept-charset="UTF-8" action="/dcodeIO/ProtoBuf.js/star" class="js-toggler-form unstarred js-star-button" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="ZiHi+J3sRHy+CW5TxY2R26O/G0/NGtnlkvsWKcCYkEmSwVWO08Kv3eqi8Xk+b9OGtVfyJ1ParKKiNrujfSvntg==" /></div>
      <button
        class="minibutton with-count js-toggler-target star-button"
        aria-label="Star this repository" title="Star dcodeIO/ProtoBuf.js">
        <span class="octicon octicon-star"></span>
        Star
      </button>
        <a class="social-count js-social-count" href="/dcodeIO/ProtoBuf.js/stargazers">
          656
        </a>
</form>  </div>

  </li>


        <li>
          <a href="/dcodeIO/ProtoBuf.js/fork" class="minibutton with-count js-toggler-target fork-button tooltipped-n" title="Fork your own copy of dcodeIO/ProtoBuf.js to your account" aria-label="Fork your own copy of dcodeIO/ProtoBuf.js to your account" rel="facebox nofollow">
            <span class="octicon octicon-repo-forked"></span>
            Fork
          </a>
          <a href="/dcodeIO/ProtoBuf.js/network" class="social-count">96</a>
        </li>

</ul>

        <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
          <span class="mega-octicon octicon-repo"></span>
          <span class="author"><a href="/dcodeIO" class="url fn" itemprop="url" rel="author"><span itemprop="title">dcodeIO</span></a></span><!--
       --><span class="path-divider">/</span><!--
       --><strong><a href="/dcodeIO/ProtoBuf.js" class="js-current-repository js-repo-home-link">ProtoBuf.js</a></strong>

          <span class="page-context-loader">
            <img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
          </span>

        </h1>
      </div><!-- /.container -->
    </div><!-- /.repohead -->

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline  ">
        <div class="repository-sidebar clearfix">
            
<div class="sunken-menu vertical-right repo-nav js-repo-nav js-repository-container-pjax js-octicon-loaders" data-issue-count-url="/dcodeIO/ProtoBuf.js/issues/counts">
  <div class="sunken-menu-contents">
    <ul class="sunken-menu-group">
      <li class="tooltipped tooltipped-w" aria-label="Code">
        <a href="/dcodeIO/ProtoBuf.js" aria-label="Code" class="selected js-selected-navigation-item sunken-menu-item" data-hotkey="g c" data-pjax="true" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /dcodeIO/ProtoBuf.js">
          <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

        <li class="tooltipped tooltipped-w" aria-label="Issues">
          <a href="/dcodeIO/ProtoBuf.js/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g i" data-selected-links="repo_issues repo_labels repo_milestones /dcodeIO/ProtoBuf.js/issues">
            <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
            <span class="js-issue-replace-counter"></span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>

      <li class="tooltipped tooltipped-w" aria-label="Pull Requests">
        <a href="/dcodeIO/ProtoBuf.js/pulls" aria-label="Pull Requests" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g p" data-selected-links="repo_pulls /dcodeIO/ProtoBuf.js/pulls">
            <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull Requests</span>
            <span class="js-pull-replace-counter"></span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>


        <li class="tooltipped tooltipped-w" aria-label="Wiki">
          <a href="/dcodeIO/ProtoBuf.js/wiki" aria-label="Wiki" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g w" data-selected-links="repo_wiki /dcodeIO/ProtoBuf.js/wiki">
            <span class="octicon octicon-book"></span> <span class="full-word">Wiki</span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>
    </ul>
    <div class="sunken-menu-separator"></div>
    <ul class="sunken-menu-group">

      <li class="tooltipped tooltipped-w" aria-label="Pulse">
        <a href="/dcodeIO/ProtoBuf.js/pulse/weekly" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="pulse /dcodeIO/ProtoBuf.js/pulse/weekly">
          <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Graphs">
        <a href="/dcodeIO/ProtoBuf.js/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="repo_graphs repo_contributors /dcodeIO/ProtoBuf.js/graphs">
          <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
    </ul>


  </div>
</div>

              <div class="only-with-full-nav">
                
  
<div class="clone-url open"
  data-protocol-type="http"
  data-url="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone">
  <h3><span class="text-emphasized">HTTPS</span> clone URL</h3>
  <div class="input-group">
    <input type="text" class="input-mini input-monospace js-url-field"
           value="https://github.com/dcodeIO/ProtoBuf.js.git" readonly="readonly">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/dcodeIO/ProtoBuf.js.git" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  
<div class="clone-url "
  data-protocol-type="ssh"
  data-url="/users/set_protocol?protocol_selector=ssh&amp;protocol_type=clone">
  <h3><span class="text-emphasized">SSH</span> clone URL</h3>
  <div class="input-group">
    <input type="text" class="input-mini input-monospace js-url-field"
           value="git@github.com:dcodeIO/ProtoBuf.js.git" readonly="readonly">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="git@github.com:dcodeIO/ProtoBuf.js.git" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  
<div class="clone-url "
  data-protocol-type="subversion"
  data-url="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone">
  <h3><span class="text-emphasized">Subversion</span> checkout URL</h3>
  <div class="input-group">
    <input type="text" class="input-mini input-monospace js-url-field"
           value="https://github.com/dcodeIO/ProtoBuf.js" readonly="readonly">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/dcodeIO/ProtoBuf.js" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>


<p class="clone-options">You can clone with
      <a href="#" class="js-clone-selector" data-protocol="http">HTTPS</a>,
      <a href="#" class="js-clone-selector" data-protocol="ssh">SSH</a>,
      or <a href="#" class="js-clone-selector" data-protocol="subversion">Subversion</a>.
  <a href="https://help.github.com/articles/which-remote-url-should-i-use" class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <span class="octicon octicon-question"></span>
  </a>
</p>

  <a href="http://mac.github.com" data-url="github-mac://openRepo/https://github.com/dcodeIO/ProtoBuf.js" class="minibutton sidebar-button js-conduit-rewrite-url" title="Save dcodeIO/ProtoBuf.js to your computer and use it in GitHub Desktop." aria-label="Save dcodeIO/ProtoBuf.js to your computer and use it in GitHub Desktop.">
    <span class="octicon octicon-device-desktop"></span>
    Clone in Desktop
  </a>


                <a href="/dcodeIO/ProtoBuf.js/archive/master.zip"
                   class="minibutton sidebar-button"
                   aria-label="Download the contents of dcodeIO/ProtoBuf.js as a zip file"
                   title="Download the contents of dcodeIO/ProtoBuf.js as a zip file"
                   rel="nofollow">
                  <span class="octicon octicon-cloud-download"></span>
                  Download ZIP
                </a>
              </div>
        </div><!-- /.repository-sidebar -->

        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>
          

<a href="/dcodeIO/ProtoBuf.js/blob/385dc0e41e42c9d99c47a6d5a63e901755ff7431/dist/ProtoBuf.noparse.min.js" class="hidden js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:b2733f7f15f828dc74ae825636fa58b7 -->

<div class="file-navigation">
  
<div class="select-menu js-menu-container js-select-menu left">
  <span class="minibutton select-menu-button js-menu-target css-truncate" data-hotkey="w"
    data-master-branch="master"
    data-ref="master"
    title="master"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <span class="octicon octicon-git-branch"></span>
    <i>branch:</i>
    <span class="js-select-button css-truncate-target">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
      </div> <!-- /.select-menu-header -->

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
            </li>
          </ul>
        </div><!-- /.select-menu-tabs -->
      </div><!-- /.select-menu-filters -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/blob/ProtoBuf2/dist/ProtoBuf.noparse.min.js"
                 data-name="ProtoBuf2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="ProtoBuf2">ProtoBuf2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item selected">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/blob/master/dist/ProtoBuf.noparse.min.js"
                 data-name="master"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="master">master</a>
            </div> <!-- /.select-menu-item -->
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.6.0/dist/ProtoBuf.noparse.min.js"
                 data-name="3.6.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.6.0">3.6.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.5.5/dist/ProtoBuf.noparse.min.js"
                 data-name="3.5.5"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.5.5">3.5.5</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.5.4/dist/ProtoBuf.noparse.min.js"
                 data-name="3.5.4"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.5.4">3.5.4</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.5.3/dist/ProtoBuf.noparse.min.js"
                 data-name="3.5.3"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.5.3">3.5.3</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.5.2/dist/ProtoBuf.noparse.min.js"
                 data-name="3.5.2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.5.2">3.5.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.5.1/dist/ProtoBuf.noparse.min.js"
                 data-name="3.5.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.5.1">3.5.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.5.0/dist/ProtoBuf.noparse.min.js"
                 data-name="3.5.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.5.0">3.5.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.4.1/dist/ProtoBuf.noparse.min.js"
                 data-name="3.4.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.4.1">3.4.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.4.0/dist/ProtoBuf.noparse.min.js"
                 data-name="3.4.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.4.0">3.4.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.3.1/dist/ProtoBuf.noparse.min.js"
                 data-name="3.3.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.3.1">3.3.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.3.0/dist/ProtoBuf.noparse.min.js"
                 data-name="3.3.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.3.0">3.3.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.2.4/dist/ProtoBuf.noparse.min.js"
                 data-name="3.2.4"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.2.4">3.2.4</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.2.3/dist/ProtoBuf.noparse.min.js"
                 data-name="3.2.3"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.2.3">3.2.3</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.2.2/dist/ProtoBuf.noparse.min.js"
                 data-name="3.2.2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.2.2">3.2.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/3.0.0/dist/ProtoBuf.noparse.min.js"
                 data-name="3.0.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.0.0">3.0.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/2.2.1/dist/ProtoBuf.noparse.min.js"
                 data-name="2.2.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.2.1">2.2.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/2.2.0/dist/ProtoBuf.noparse.min.js"
                 data-name="2.2.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.2.0">2.2.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/2.0.5/dist/ProtoBuf.noparse.min.js"
                 data-name="2.0.5"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.0.5">2.0.5</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/dcodeIO/ProtoBuf.js/tree/1.5.2/dist/ProtoBuf.noparse.min.js"
                 data-name="1.5.2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="1.5.2">1.5.2</a>
            </div> <!-- /.select-menu-item -->
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

    </div> <!-- /.select-menu-modal -->
  </div> <!-- /.select-menu-modal-holder -->
</div> <!-- /.select-menu -->

  <div class="button-group right">
    <a href="/dcodeIO/ProtoBuf.js/find/master"
          class="js-show-file-finder minibutton empty-icon tooltipped tooltipped-s"
          data-pjax
          data-hotkey="t"
          aria-label="Quickly jump between files">
      <span class="octicon octicon-list-unordered"></span>
    </a>
    <button class="js-zeroclipboard minibutton zeroclipboard-button"
          data-clipboard-text="dist/ProtoBuf.noparse.min.js"
          aria-label="Copy to clipboard"
          data-copied-hint="Copied!">
      <span class="octicon octicon-clippy"></span>
    </button>
  </div>

  <div class="breadcrumb">
    <span class='repo-root js-repo-root'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/dcodeIO/ProtoBuf.js" class="" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">ProtoBuf.js</span></a></span></span><span class="separator"> / </span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/dcodeIO/ProtoBuf.js/tree/master/dist" class="" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">dist</span></a></span><span class="separator"> / </span><strong class="final-path">ProtoBuf.noparse.min.js</strong>
  </div>
</div>


  <div class="commit commit-loader file-history-tease js-deferred-content" data-url="/dcodeIO/ProtoBuf.js/contributors/master/dist/ProtoBuf.noparse.min.js">
    <div class="file-history-tease-header">
      Fetching contributors&hellip;
    </div>

    <div class="participation">
      <p class="loader-loading"><img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32-EAF2F5.gif" width="16" /></p>
      <p class="loader-error">Cannot retrieve contributors at this time</p>
    </div>
  </div>

<div class="file-box">
  <div class="file">
    <div class="meta clearfix">
      <div class="info file-name">
          <span>75 lines (74 sloc)</span>
          <span class="meta-divider"></span>
        <span>35.696 kb</span>
      </div>
      <div class="actions">
        <div class="button-group">
          <a href="/dcodeIO/ProtoBuf.js/raw/master/dist/ProtoBuf.noparse.min.js" class="minibutton " id="raw-url">Raw</a>
            <a href="/dcodeIO/ProtoBuf.js/blame/master/dist/ProtoBuf.noparse.min.js" class="minibutton js-update-url-with-hash">Blame</a>
          <a href="/dcodeIO/ProtoBuf.js/commits/master/dist/ProtoBuf.noparse.min.js" class="minibutton " rel="nofollow">History</a>
        </div><!-- /.button-group -->

          <a class="octicon-button tooltipped tooltipped-nw js-conduit-openfile-check"
             href="http://mac.github.com"
             data-url="github-mac://openRepo/https://github.com/dcodeIO/ProtoBuf.js?branch=master&amp;filepath=dist%2FProtoBuf.noparse.min.js"
             aria-label="Open this file in GitHub for Mac"
             data-failed-title="Your version of GitHub for Mac is too old to open this file. Try checking for updates.">
              <span class="octicon octicon-device-desktop"></span>
          </a>

              <a class="octicon-button tooltipped tooltipped-n js-update-url-with-hash"
                 aria-label="Clicking this button will fork this project so you can edit the file"
                 href="/dcodeIO/ProtoBuf.js/edit/master/dist/ProtoBuf.noparse.min.js"
                 data-method="post" rel="nofollow"><span class="octicon octicon-pencil"></span></a>

            <a class="octicon-button danger tooltipped tooltipped-s"
               href="/dcodeIO/ProtoBuf.js/delete/master/dist/ProtoBuf.noparse.min.js"
               aria-label="Fork this project and delete file"
               data-method="post" data-test-id="delete-blob-file" rel="nofollow">
          <span class="octicon octicon-trashcan"></span>
        </a>
      </div><!-- /.actions -->
    </div>
    
  <div class="blob-wrapper data type-javascript">
      <table class="highlight tab-size-8 js-file-line-container">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code js-file-line"><span class="cm">/*</span></td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code js-file-line"><span class="cm"> ProtoBuf.js (c) 2013 Daniel Wirtz &lt;dcode@dcode.io&gt;</span></td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code js-file-line"><span class="cm"> Released under the Apache License, Version 2.0</span></td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code js-file-line"><span class="cm"> see: https://github.com/dcodeIO/ProtoBuf.js for details</span></td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code js-file-line"><span class="cm">*/</span></td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code js-file-line"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">w</span><span class="p">){</span><span class="kd">function</span> <span class="nx">x</span><span class="p">(</span><span class="nx">k</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="p">{</span><span class="nx">VERSION</span><span class="o">:</span><span class="s2">&quot;3.7.0&quot;</span><span class="p">,</span><span class="nx">WIRE_TYPES</span><span class="o">:</span><span class="p">{}};</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS64</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">LDELIM</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">STARTGROUP</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">ENDGROUP</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS32</span><span class="o">=</span><span class="mi">5</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">PACKABLE_WIRE_TYPES</span><span class="o">=</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS64</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS32</span><span class="p">];</span><span class="nx">g</span><span class="p">.</span><span class="nx">TYPES</span><span class="o">=</span><span class="p">{</span><span class="nx">int32</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;int32&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="p">},</span><span class="nx">uint32</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;uint32&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="p">},</span><span class="nx">sint32</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;sint32&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="p">},</span><span class="nx">int64</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;int64&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="p">},</span><span class="nx">uint64</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;uint64&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code js-file-line"><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="p">},</span><span class="nx">sint64</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;sint64&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="p">},</span><span class="nx">bool</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;bool&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="p">},</span><span class="s2">&quot;double&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;double&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS64</span><span class="p">},</span><span class="nx">string</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;string&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">LDELIM</span><span class="p">},</span><span class="nx">bytes</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;bytes&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">LDELIM</span><span class="p">},</span><span class="nx">fixed32</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;fixed32&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS32</span><span class="p">},</span><span class="nx">sfixed32</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;sfixed32&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS32</span><span class="p">},</span><span class="nx">fixed64</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;fixed64&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS64</span><span class="p">},</span><span class="nx">sfixed64</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;sfixed64&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS64</span><span class="p">},</span></td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code js-file-line"><span class="s2">&quot;float&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;float&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS32</span><span class="p">},</span><span class="s2">&quot;enum&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;enum&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="p">},</span><span class="nx">message</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;message&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">LDELIM</span><span class="p">},</span><span class="nx">group</span><span class="o">:</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">&quot;group&quot;</span><span class="p">,</span><span class="nx">wireType</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">STARTGROUP</span><span class="p">}};</span><span class="nx">g</span><span class="p">.</span><span class="nx">ID_MIN</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">ID_MAX</span><span class="o">=</span><span class="mi">536870911</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">ByteBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">Long</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">Long</span><span class="o">||</span><span class="kc">null</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">convertFieldsToCamelCase</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">populateAccessors</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">Util</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="o">||</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(){}</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Object.create polyfill only accepts the first parameter.&quot;</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code js-file-line"><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">g</span><span class="p">});</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">{</span><span class="nx">IS_NODE</span><span class="o">:!</span><span class="mi">1</span><span class="p">};</span><span class="k">try</span><span class="p">{</span><span class="nx">c</span><span class="p">.</span><span class="nx">IS_NODE</span><span class="o">=</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">require</span><span class="o">&amp;&amp;</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">).</span><span class="nx">readFileSync</span><span class="o">&amp;&amp;</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;path&quot;</span><span class="p">).</span><span class="nx">resolve</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">g</span><span class="p">){}</span><span class="nx">c</span><span class="p">.</span><span class="nx">XHR</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">},</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;Msxml2.XMLHTTP&quot;</span><span class="p">)},</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;Msxml3.XMLHTTP&quot;</span><span class="p">)},</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">&quot;Microsoft.XMLHTTP&quot;</span><span class="p">)}],</span><span class="nx">g</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">){</span><span class="k">try</span><span class="p">{</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">s</span><span class="p">]()}</span><span class="k">catch</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">continue</span><span class="p">}</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;XMLHttpRequest is not supported&quot;</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code js-file-line"><span class="k">return</span> <span class="nx">g</span><span class="p">};</span><span class="nx">c</span><span class="p">.</span><span class="nx">fetch</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">p</span><span class="p">){</span><span class="nx">p</span><span class="o">&amp;&amp;</span><span class="s2">&quot;function&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">p</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="kc">null</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">IS_NODE</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">).</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">?</span><span class="nx">p</span><span class="p">(</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="nx">p</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">)});</span><span class="k">else</span> <span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">).</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">s</span><span class="p">){</span><span class="k">return</span> <span class="kc">null</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">XHR</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">p</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s2">&quot;Accept&quot;</span><span class="p">,</span><span class="s2">&quot;text/plain&quot;</span><span class="p">);</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="p">(</span><span class="s2">&quot;text/plain&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">onreadystatechange</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="mi">4</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">readyState</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mi">200</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">status</span><span class="o">||</span><span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">status</span><span class="o">&amp;&amp;</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">responseText</span><span class="o">?</span><span class="nx">p</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">responseText</span><span class="p">)</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code js-file-line"><span class="nx">p</span><span class="p">(</span><span class="kc">null</span><span class="p">))},</span><span class="mi">4</span><span class="o">!=</span><span class="nx">b</span><span class="p">.</span><span class="nx">readyState</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span><span class="k">else</span> <span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">),</span><span class="mi">200</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">status</span><span class="o">||</span><span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">status</span><span class="o">&amp;&amp;</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">responseText</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">responseText</span><span class="o">:</span><span class="kc">null</span><span class="p">}};</span><span class="nx">c</span><span class="p">.</span><span class="nx">isArray</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;[object Array]&quot;</span><span class="o">===</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">c</span><span class="p">)};</span><span class="k">return</span> <span class="nx">c</span><span class="p">}();</span><span class="nx">g</span><span class="p">.</span><span class="nx">Lang</span><span class="o">=</span><span class="p">{</span><span class="nx">OPEN</span><span class="o">:</span><span class="s2">&quot;{&quot;</span><span class="p">,</span><span class="nx">CLOSE</span><span class="o">:</span><span class="s2">&quot;}&quot;</span><span class="p">,</span><span class="nx">OPTOPEN</span><span class="o">:</span><span class="s2">&quot;[&quot;</span><span class="p">,</span><span class="nx">OPTCLOSE</span><span class="o">:</span><span class="s2">&quot;]&quot;</span><span class="p">,</span><span class="nx">OPTEND</span><span class="o">:</span><span class="s2">&quot;,&quot;</span><span class="p">,</span><span class="nx">EQUAL</span><span class="o">:</span><span class="s2">&quot;=&quot;</span><span class="p">,</span><span class="nx">END</span><span class="o">:</span><span class="s2">&quot;;&quot;</span><span class="p">,</span><span class="nx">STRINGOPEN</span><span class="o">:</span><span class="s1">&#39;&quot;&#39;</span><span class="p">,</span><span class="nx">STRINGCLOSE</span><span class="o">:</span><span class="s1">&#39;&quot;&#39;</span><span class="p">,</span><span class="nx">STRINGOPEN_SQ</span><span class="o">:</span><span class="s2">&quot;&#39;&quot;</span><span class="p">,</span><span class="nx">STRINGCLOSE_SQ</span><span class="o">:</span><span class="s2">&quot;&#39;&quot;</span><span class="p">,</span><span class="nx">COPTOPEN</span><span class="o">:</span><span class="s2">&quot;(&quot;</span><span class="p">,</span><span class="nx">COPTCLOSE</span><span class="o">:</span><span class="s2">&quot;)&quot;</span><span class="p">,</span><span class="nx">DELIM</span><span class="o">:</span><span class="sr">/[\s\{\}=;\[\],&#39;&quot;\(\)]/g</span><span class="p">,</span><span class="nx">RULE</span><span class="o">:</span><span class="sr">/^(?:required|optional|repeated)$/</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code js-file-line"><span class="nx">TYPE</span><span class="o">:</span><span class="sr">/^(?:double|float|int32|uint32|sint32|int64|uint64|sint64|fixed32|sfixed32|fixed64|sfixed64|bool|string|bytes)$/</span><span class="p">,</span><span class="nx">NAME</span><span class="o">:</span><span class="sr">/^[a-zA-Z_][a-zA-Z_0-9]*$/</span><span class="p">,</span><span class="nx">TYPEDEF</span><span class="o">:</span><span class="sr">/^[a-zA-Z][a-zA-Z_0-9]*$/</span><span class="p">,</span><span class="nx">TYPEREF</span><span class="o">:</span><span class="sr">/^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/</span><span class="p">,</span><span class="nx">FQTYPEREF</span><span class="o">:</span><span class="sr">/^(?:\.[a-zA-Z][a-zA-Z_0-9]*)+$/</span><span class="p">,</span><span class="nx">NUMBER</span><span class="o">:</span><span class="sr">/^-?(?:[1-9][0-9]*|0|0x[0-9a-fA-F]+|0[0-7]+|([0-9]*\.[0-9]+([Ee][+-]?[0-9]+)?))$/</span><span class="p">,</span><span class="nx">NUMBER_DEC</span><span class="o">:</span><span class="sr">/^(?:[1-9][0-9]*|0)$/</span><span class="p">,</span><span class="nx">NUMBER_HEX</span><span class="o">:</span><span class="sr">/^0x[0-9a-fA-F]+$/</span><span class="p">,</span><span class="nx">NUMBER_OCT</span><span class="o">:</span><span class="sr">/^0[0-7]+$/</span><span class="p">,</span><span class="nx">NUMBER_FLT</span><span class="o">:</span><span class="sr">/^[0-9]*\.[0-9]+([Ee][+-]?[0-9]+)?$/</span><span class="p">,</span><span class="nx">ID</span><span class="o">:</span><span class="sr">/^(?:[1-9][0-9]*|0|0x[0-9a-fA-F]+|0[0-7]+)$/</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code js-file-line"><span class="nx">NEGID</span><span class="o">:</span><span class="sr">/^\-?(?:[1-9][0-9]*|0|0x[0-9a-fA-F]+|0[0-7]+)$/</span><span class="p">,</span><span class="nx">WHITESPACE</span><span class="o">:</span><span class="sr">/\s/</span><span class="p">,</span><span class="nx">STRING</span><span class="o">:</span><span class="sr">/[&#39;&quot;]([^&#39;&quot;\\]*(\\.[^&quot;\\]*)*)[&#39;&quot;]/g</span><span class="p">,</span><span class="nx">BOOL</span><span class="o">:</span><span class="sr">/^(?:true|false)$/i</span><span class="p">};</span><span class="nx">g</span><span class="p">.</span><span class="nx">Reflect</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">(),</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">7</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">&gt;&gt;</span><span class="mi">3</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="o">:</span><span class="k">do</span> <span class="nx">b</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">readUint8</span><span class="p">();</span><span class="k">while</span><span class="p">(</span><span class="mi">128</span><span class="o">===</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;</span><span class="mi">128</span><span class="p">));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS64</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">offset</span><span class="o">+=</span><span class="mi">8</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">LDELIM</span><span class="o">:</span><span class="nx">b</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">();</span><span class="nx">h</span><span class="p">.</span><span class="nx">offset</span><span class="o">+=</span><span class="nx">b</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">STARTGROUP</span><span class="o">:</span><span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">ENDGROUP</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal GROUPEND after unknown group: &quot;</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code js-file-line"><span class="nx">b</span><span class="o">+</span><span class="s2">&quot; (&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; expected)&quot;</span><span class="p">);</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS32</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">offset</span><span class="o">+=</span><span class="mi">4</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal wire type in unknown group &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">e</span><span class="p">);}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;number&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">low</span><span class="o">&amp;&amp;</span><span class="s2">&quot;number&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">high</span><span class="o">&amp;&amp;</span><span class="s2">&quot;boolean&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">unsigned</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">low</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">low</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">high</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">high</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Long</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">low</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">high</span><span class="p">,</span><span class="s2">&quot;undefined&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">h</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">unsigned</span><span class="o">:</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Long</span><span class="p">.</span><span class="nx">fromString</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="o">||!</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Long</span><span class="p">.</span><span class="nx">fromNumber</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="o">||!</span><span class="mi">1</span><span class="p">);</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;not convertible to Long&quot;</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code js-file-line"><span class="p">}</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="p">{},</span><span class="nx">r</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">builder</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="nx">b</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">fqn</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">do</span><span class="p">{</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">h</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;.&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">toString</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">fqn</span><span class="p">()};</span><span class="nx">b</span><span class="p">.</span><span class="nx">build</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot; cannot be built directly&quot;</span><span class="p">);};</span><span class="nx">p</span><span class="p">.</span><span class="nx">T</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="o">=</span><span class="s2">&quot;Namespace&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="p">{}},</span><span class="nx">b</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">getChildren</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code js-file-line"><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="o">++</span><span class="nx">b</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="k">return</span> <span class="nx">h</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">addChild</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span> <span class="k">instanceof</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Field</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">name</span><span class="o">!==</span><span class="nx">h</span><span class="p">.</span><span class="nx">originalName</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">originalName</span><span class="p">))</span><span class="nx">h</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">originalName</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Field</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">originalName</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">originalName</span><span class="p">))</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">originalName</span><span class="p">;</span><span class="k">else</span> <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Duplicate name in namespace &quot;</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">b</span><span class="p">.</span><span class="nx">getChild</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="s2">&quot;number&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">?</span><span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="s2">&quot;name&quot;</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="o">++</span><span class="nx">b</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">h</span><span class="p">]</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">return</span> <span class="kc">null</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">resolve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">===</span><span class="nx">c</span><span class="p">[</span><span class="nx">f</span><span class="p">]){</span><span class="k">for</span><span class="p">(;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;)</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">}</span><span class="k">do</span><span class="p">{</span><span class="k">do</span><span class="p">{</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">f</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">p</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span><span class="o">||</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Field</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="nx">f</span><span class="o">++</span><span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="p">)</span><span class="k">break</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code js-file-line"><span class="nx">b</span><span class="p">)}</span><span class="k">while</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">e</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">build</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">{},</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="o">++</span><span class="nx">c</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">m</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">build</span><span class="p">());</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="o">&amp;&amp;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;$options&quot;</span><span class="p">,{</span><span class="nx">value</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">buildOpt</span><span class="p">()});</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">buildOpt</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">{},</span><span class="nx">b</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="o">++</span><span class="nx">c</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]];</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">getOption</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;undefined&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">:</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">:</span><span class="kc">null</span><span class="p">};</span><span class="nx">p</span><span class="p">.</span><span class="nx">Namespace</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code js-file-line"><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">m</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="o">=</span><span class="s2">&quot;Message&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">extensions</span><span class="o">=</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">ID_MIN</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">ID_MAX</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">clazz</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">=!!</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_fieldsByName</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_fieldsById</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_fields</span><span class="o">=</span><span class="kc">null</span><span class="p">},</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">build</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">clazz</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">clazz</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="p">{},</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">||</span><span class="s2">&quot;object&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">?</span><span class="nx">h</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">k</span><span class="o">?</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toBuffer</span><span class="p">())</span><span class="o">:</span><span class="nx">h</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">b</span><span class="p">));</span><span class="k">return</span> <span class="nx">h</span><span class="p">}</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Field</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code js-file-line"><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">OneOf</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Builder</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="o">++</span><span class="nx">e</span><span class="p">)</span><span class="k">this</span><span class="p">[</span><span class="nx">f</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="o">++</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="k">this</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">repeated</span><span class="o">?</span><span class="p">[]</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">required</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">defaultValue</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">defaultValue</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">!==</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="s2">&quot;object&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">||</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">encode</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">k</span><span class="o">||</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">ArrayBuffer</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">Long</span><span class="o">&amp;&amp;</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Long</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="o">++</span><span class="nx">e</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">name</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code js-file-line"><span class="nx">arguments</span><span class="p">[</span><span class="nx">e</span><span class="p">]);</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="o">++</span><span class="nx">e</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">]])},</span><span class="nx">e</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">Builder</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">add</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">_fieldsByName</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="k">this</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot; is undefined&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Field</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="k">this</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot; is not a field: &quot;</span><span class="o">+</span><span class="nx">l</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">.</span><span class="nx">repeated</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="k">this</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot; is not a repeated field&quot;</span><span class="p">);}</span><span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="k">this</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">name</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="o">?</span><span class="nx">h</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">verifyValue</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">))};</span><span class="nx">e</span><span class="p">.</span><span class="nx">$add</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code js-file-line"><span class="nx">e</span><span class="p">.</span><span class="nx">add</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">set</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="s2">&quot;object&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span> <span class="k">in</span> <span class="nx">c</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">_fieldsByName</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="k">this</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">l</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="k">this</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot; is not a field: undefined&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Field</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="k">this</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot; is not a field: &quot;</span><span class="o">+</span><span class="nx">l</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">verifyValue</span><span class="p">(</span><span class="nx">h</span><span class="p">)}</span><span class="nx">l</span><span class="p">.</span><span class="nx">oneof</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="nx">h</span><span class="o">?</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="k">this</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">oneof</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="k">this</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">oneof</span><span class="p">.</span><span class="nx">name</span><span class="p">]]</span><span class="o">=</span><span class="kc">null</span><span class="p">),</span><span class="k">this</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">oneof</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">oneof</span><span class="p">.</span><span class="nx">name</span><span class="o">===</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">oneof</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code js-file-line"><span class="kc">null</span><span class="p">));</span><span class="k">return</span> <span class="k">this</span><span class="p">};</span><span class="nx">e</span><span class="p">.</span><span class="nx">$set</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">set</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">get</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">_fieldsByName</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Field</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="k">this</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot; is not a field: undefined&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Field</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="k">this</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot; is not a field: &quot;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">]};</span><span class="nx">e</span><span class="p">.</span><span class="nx">$get</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">get</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">ExtensionField</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">builder</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">populateAccessors</span><span class="o">&amp;&amp;</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">originalName</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(_[a-zA-Z])/g</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code js-file-line"><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)}),</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">originalName</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/([A-Z])/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;_&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">}),</span><span class="nx">l</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">verifyValue</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">f</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">]};</span><span class="kc">null</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="s2">&quot;set&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="s2">&quot;set&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">);</span><span class="kc">null</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="s2">&quot;set_&quot;</span><span class="o">+</span><span class="nx">h</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="s2">&quot;set_&quot;</span><span class="o">+</span><span class="nx">h</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">);</span><span class="kc">null</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="s2">&quot;get&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="s2">&quot;get&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">);</span><span class="kc">null</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="s2">&quot;get_&quot;</span><span class="o">+</span><span class="nx">h</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="s2">&quot;get_&quot;</span><span class="o">+</span><span class="nx">h</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">)}(</span><span class="nx">m</span><span class="p">)}</span><span class="nx">e</span><span class="p">.</span><span class="nx">encode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="s2">&quot;boolean&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code js-file-line"><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">,</span><span class="nx">h</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">littleEndian</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">LE</span><span class="p">(),</span><span class="nx">c</span><span class="p">),(</span><span class="nx">h</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">flip</span><span class="p">()</span><span class="o">:</span><span class="nx">a</span><span class="p">).</span><span class="nx">LE</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">l</span><span class="p">){</span><span class="k">throw</span> <span class="nx">a</span><span class="p">.</span><span class="nx">LE</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="nx">l</span><span class="p">;}};</span><span class="nx">e</span><span class="p">.</span><span class="nx">calculate</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">calculate</span><span class="p">(</span><span class="k">this</span><span class="p">)};</span><span class="nx">e</span><span class="p">.</span><span class="nx">encodeDelimited</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">,</span><span class="nx">c</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nx">k</span><span class="p">).</span><span class="nx">LE</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">h</span><span class="p">).</span><span class="nx">flip</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">remaining</span><span class="p">());</span><span class="nx">a</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">flip</span><span class="p">()</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="nx">e</span><span class="p">.</span><span class="nx">encodeAB</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">encode</span><span class="p">().</span><span class="nx">toArrayBuffer</span><span class="p">()}</span><span class="k">catch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">throw</span> <span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="p">.</span><span class="nx">toArrayBuffer</span><span class="p">()),</span><span class="nx">a</span><span class="p">;}};</span><span class="nx">e</span><span class="p">.</span><span class="nx">toArrayBuffer</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">encodeAB</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">encodeNB</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code js-file-line"><span class="kd">function</span><span class="p">(){</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">encode</span><span class="p">().</span><span class="nx">toBuffer</span><span class="p">()}</span><span class="k">catch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">throw</span> <span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="p">.</span><span class="nx">toBuffer</span><span class="p">()),</span><span class="nx">a</span><span class="p">;}};</span><span class="nx">e</span><span class="p">.</span><span class="nx">toBuffer</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">encodeNB</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">encode64</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">encode</span><span class="p">().</span><span class="nx">toBase64</span><span class="p">()}</span><span class="k">catch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">throw</span> <span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="p">.</span><span class="nx">toBase64</span><span class="p">()),</span><span class="nx">a</span><span class="p">;}};</span><span class="nx">e</span><span class="p">.</span><span class="nx">toBase64</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">encode64</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">encodeHex</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">encode</span><span class="p">().</span><span class="nx">toHex</span><span class="p">()}</span><span class="k">catch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">throw</span> <span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="p">.</span><span class="nx">toHex</span><span class="p">()),</span><span class="nx">a</span><span class="p">;}};</span><span class="nx">e</span><span class="p">.</span><span class="nx">toHex</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">encodeHex</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">toRaw</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="o">!!</span><span class="nx">a</span><span class="p">)};</span><span class="nx">l</span><span class="p">.</span><span class="nx">decode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="s2">&quot;base64&quot;</span><span class="p">));</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">k</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">littleEndian</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">LE</span><span class="p">());</span><span class="nx">a</span><span class="p">.</span><span class="nx">LE</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">l</span><span class="p">){</span><span class="k">throw</span> <span class="nx">a</span><span class="p">.</span><span class="nx">LE</span><span class="p">(</span><span class="nx">h</span><span class="p">),</span><span class="nx">l</span><span class="p">;}};</span><span class="nx">l</span><span class="p">.</span><span class="nx">decodeDelimited</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="s2">&quot;base64&quot;</span><span class="p">));</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">k</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">remaining</span><span class="p">())</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">remaining</span><span class="p">()</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="kc">null</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="o">+</span><span class="nx">e</span><span class="p">).</span><span class="nx">LE</span><span class="p">());</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="o">+=</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="nx">l</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="k">throw</span> <span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="o">+=</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">;}};</span><span class="nx">l</span><span class="p">.</span><span class="nx">decode64</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">l</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code js-file-line"><span class="s2">&quot;base64&quot;</span><span class="p">)};</span><span class="nx">l</span><span class="p">.</span><span class="nx">decodeHex</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">l</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;hex&quot;</span><span class="p">)};</span><span class="nx">e</span><span class="p">.</span><span class="nx">toString</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">toString</span><span class="p">()};</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="s2">&quot;$options&quot;</span><span class="p">,{</span><span class="nx">value</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">buildOpt</span><span class="p">()}),</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&quot;$type&quot;</span><span class="p">,{</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">b</span><span class="p">}}));</span><span class="k">return</span> <span class="nx">l</span><span class="p">}(</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">_fields</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">_fieldsById</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">_fieldsByName</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">q</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">build</span><span class="p">();</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">f</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">build</span><span class="p">();</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Field</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">build</span><span class="p">(),</span></td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">_fields</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_fieldsById</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_fieldsByName</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">f</span><span class="p">.</span><span class="nx">OneOf</span><span class="o">||</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">n</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal reflect child of &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">clazz</span><span class="o">=</span><span class="nx">a</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">encode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_fields</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="o">++</span><span class="nx">d</span><span class="p">)</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_fields</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">name</span><span class="p">],</span><span class="nx">f</span><span class="p">.</span><span class="nx">required</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">===</span><span class="nx">g</span><span class="o">?</span><span class="kc">null</span><span class="o">===</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">c</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">verifyValue</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="nx">e</span><span class="p">)</span><span class="k">throw</span> <span class="nx">a</span><span class="o">=</span><span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing at least one required field for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code js-file-line"><span class="nx">e</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">encoded</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">calculate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_fields</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="o">++</span><span class="nx">c</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_fields</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">name</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">required</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">===</span><span class="nx">d</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing at least one required field for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">f</span><span class="p">);</span><span class="nx">b</span><span class="o">+=</span><span class="nx">f</span><span class="p">.</span><span class="nx">calculate</span><span class="p">(</span><span class="nx">d</span><span class="p">)}</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">decode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="s2">&quot;number&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="k">this</span><span class="p">.</span><span class="nx">clazz</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="o">&lt;</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="o">||-</span><span class="mi">1</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">remaining</span><span class="p">();){</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">();</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="o">&amp;</span><span class="mi">7</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="o">&gt;&gt;</span><span class="mi">3</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">ENDGROUP</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">!==</span><span class="nx">l</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal group end indicator for &quot;</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&quot; (&quot;</span><span class="o">+</span><span class="p">(</span><span class="nx">l</span><span class="o">?</span><span class="nx">l</span><span class="o">+</span><span class="s2">&quot; expected&quot;</span><span class="o">:</span><span class="s2">&quot;not a group&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">);</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_fieldsById</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span><span class="nx">d</span><span class="p">.</span><span class="nx">repeated</span><span class="o">&amp;&amp;!</span><span class="nx">d</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">packed</span><span class="o">?</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">a</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">oneof</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="k">this</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">oneof</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="k">this</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">oneof</span><span class="p">.</span><span class="nx">name</span><span class="p">]]</span><span class="o">=</span><span class="kc">null</span><span class="p">),</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">oneof</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">));</span><span class="k">else</span> <span class="k">switch</span><span class="p">(</span><span class="nx">m</span><span class="p">){</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">VARINT</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">();</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS32</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="o">+=</span><span class="mi">4</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">BITS64</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="o">+=</span><span class="mi">8</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">LDELIM</span><span class="o">:</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="o">+=</span><span class="nx">d</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">STARTGROUP</span><span class="o">:</span><span class="k">for</span><span class="p">(;</span><span class="nx">g</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code js-file-line"><span class="nx">a</span><span class="p">););</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal wire type for unknown field &quot;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&quot; in &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;#decode: &quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">);}}</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_fields</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="o">++</span><span class="nx">a</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_fields</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="kc">null</span><span class="o">===</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">]){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">required</span><span class="p">)</span><span class="k">throw</span> <span class="nx">a</span><span class="o">=</span><span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Missing at least one required field for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">decoded</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">a</span><span class="p">;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">defaultValue</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">defaultValue</span><span class="p">)}</span><span class="k">return</span> <span class="nx">f</span><span class="p">};</span><span class="nx">p</span><span class="p">.</span><span class="nx">Message</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="o">=</span><span class="s2">&quot;Message.Field&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">required</span><span class="o">=</span><span class="s2">&quot;required&quot;</span><span class="o">===</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">repeated</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code js-file-line"><span class="s2">&quot;repeated&quot;</span><span class="o">===</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">resolvedType</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="nx">g</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">defaultValue</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">oneof</span><span class="o">=</span><span class="nx">n</span><span class="o">||</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">originalName</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">builder</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">convertFieldsToCamelCase</span><span class="o">||</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">f</span><span class="p">.</span><span class="nx">ExtensionField</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">_toCamelCase</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">))};</span><span class="nx">u</span><span class="p">.</span><span class="nx">_toCamelCase</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/_([a-zA-Z])/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()})};</span><span class="nx">d</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">build</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">defaultValue</span><span class="o">=</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="s2">&quot;default&quot;</span><span class="p">]</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">verifyValue</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="s2">&quot;default&quot;</span><span class="p">])</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code js-file-line"><span class="kc">null</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">verifyValue</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal value for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot; of type &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; (&quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">);}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">required</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;required&quot;</span><span class="p">),</span><span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">repeated</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="p">[</span><span class="nx">a</span><span class="p">]);</span><span class="nx">l</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">verifyValue</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="k">return</span> <span class="nx">l</span><span class="p">}</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">repeated</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;no array expected&quot;</span><span class="p">);</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">int32</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sint32</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sfixed32</span><span class="o">:</span><span class="k">return</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">!==</span></td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code js-file-line"><span class="k">typeof</span> <span class="nx">a</span><span class="o">||</span><span class="nx">a</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">%</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;not an integer&quot;</span><span class="p">),</span><span class="mi">4294967295</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">|</span><span class="mi">0</span><span class="o">:</span><span class="nx">a</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">uint32</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">fixed32</span><span class="o">:</span><span class="k">return</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">||</span><span class="nx">a</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">%</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;not an integer&quot;</span><span class="p">),</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="o">:</span><span class="nx">a</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">int64</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sint64</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sfixed64</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Long</span><span class="p">)</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">message</span><span class="p">)}</span><span class="k">else</span> <span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;requires Long.js&quot;</span><span class="p">);</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">uint64</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">fixed64</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Long</span><span class="p">)</span><span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">message</span><span class="p">)}</span><span class="k">else</span> <span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;requires Long.js&quot;</span><span class="p">);</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">bool</span><span class="o">:</span><span class="k">return</span><span class="s2">&quot;boolean&quot;</span><span class="o">!==</span></td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code js-file-line"><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;not a boolean&quot;</span><span class="p">),</span><span class="nx">a</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;float&quot;</span><span class="p">]</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;double&quot;</span><span class="p">]</span><span class="o">:</span><span class="k">return</span><span class="s2">&quot;number&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;not a number&quot;</span><span class="p">),</span><span class="nx">a</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">string</span><span class="o">:</span><span class="k">return</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">||</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">String</span><span class="o">||</span><span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;not a string&quot;</span><span class="p">),</span><span class="s2">&quot;&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">bytes</span><span class="o">:</span><span class="k">return</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">k</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;enum&quot;</span><span class="p">]</span><span class="o">:</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">resolvedType</span><span class="p">.</span><span class="nx">getChildren</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">Value</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">name</span><span class="o">==</span><span class="nx">a</span><span class="o">||</span><span class="nx">m</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">id</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">m</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">id</span><span class="p">;</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;not a valid enum value&quot;</span><span class="p">);</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">group</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">message</span><span class="o">:</span><span class="nx">a</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code js-file-line"><span class="s2">&quot;object&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">||</span><span class="nx">l</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="s2">&quot;object expected&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="k">this</span><span class="p">.</span><span class="nx">resolvedType</span><span class="p">.</span><span class="nx">clazz</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Builder</span><span class="p">.</span><span class="nx">Message</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]);</span><span class="nx">a</span><span class="o">=</span><span class="nx">l</span><span class="p">}</span><span class="k">return</span> <span class="k">new</span> <span class="k">this</span><span class="p">.</span><span class="nx">resolvedType</span><span class="p">.</span><span class="nx">clazz</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;[INTERNAL] Illegal value for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; (undefined type &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">);};</span><span class="nx">d</span><span class="p">.</span><span class="nx">encode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">||</span><span class="s2">&quot;object&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;[INTERNAL] Unresolved type in &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">a</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">repeated</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code js-file-line"><span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">repeated</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">packed</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">.</span><span class="nx">PACKABLE_WIRE_TYPES</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">wireType</span><span class="p">)){</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="o">|</span><span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">LDELIM</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">ensureCapacity</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">offset</span><span class="o">+=</span><span class="mi">1</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">offset</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">encodeValue</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">b</span><span class="p">);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">offset</span><span class="o">-</span><span class="nx">e</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">offset</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="p">(</span><span class="nx">m</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">offset</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="o">-</span><span class="nx">m</span><span class="p">)}</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="o">|</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">wireType</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">encodeValue</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">b</span><span class="p">)}</span><span class="k">else</span> <span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">&lt;&lt;</span></td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code js-file-line"><span class="mi">3</span><span class="o">|</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">wireType</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">encodeValue</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal value for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; (&quot;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">);}</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">encodeValue</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">int32</span><span class="o">:</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint64</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">uint32</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sint32</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32ZigZag</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">fixed32</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeUint32</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sfixed32</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeInt32</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">int64</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">uint64</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint64</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code js-file-line"><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sint64</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint64ZigZag</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">fixed64</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeUint64</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sfixed64</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeInt64</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">bool</span><span class="o">:</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="s2">&quot;false&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span><span class="o">?</span><span class="mi">0</span><span class="o">:!!</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="nx">a</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;enum&quot;</span><span class="p">]</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;float&quot;</span><span class="p">]</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeFloat32</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;double&quot;</span><span class="p">]</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeFloat64</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">string</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVString</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">bytes</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">remaining</span><span class="p">())</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal value for &quot;</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">remaining</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot; bytes remaining&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">remaining</span><span class="p">());</span><span class="nx">b</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">message</span><span class="o">:</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nx">k</span><span class="p">).</span><span class="nx">LE</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">resolvedType</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">offset</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">flip</span><span class="p">());</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">group</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">resolvedType</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeVarint32</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="o">|</span><span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">ENDGROUP</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;[INTERNAL] Illegal value to encode in &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; (unknown type)&quot;</span><span class="p">);}</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">calculate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">verifyValue</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code js-file-line"><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">||</span><span class="s2">&quot;object&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;[INTERNAL] Unresolved type in &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">a</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">repeated</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">repeated</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">packed</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">.</span><span class="nx">PACKABLE_WIRE_TYPES</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">wireType</span><span class="p">)){</span><span class="nx">b</span><span class="o">+=</span><span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="o">|</span><span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">LDELIM</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">calculateValue</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="nx">b</span><span class="o">+=</span><span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="o">+=</span><span class="nx">e</span><span class="p">}</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="o">+=</span><span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="o">|</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">wireType</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code js-file-line"><span class="nx">b</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">calculateValue</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">])}</span><span class="k">else</span> <span class="nx">b</span><span class="o">+=</span><span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="o">|</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">wireType</span><span class="p">),</span><span class="nx">b</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">calculateValue</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal value for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; (&quot;</span><span class="o">+</span><span class="nx">f</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">);}</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">calculateValue</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">int32</span><span class="o">:</span><span class="k">return</span> <span class="mi">0</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint64</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">uint32</span><span class="o">:</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sint32</span><span class="o">:</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">zigZagEncode32</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">fixed32</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sfixed32</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;float&quot;</span><span class="p">]</span><span class="o">:</span><span class="k">return</span> <span class="mi">4</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code js-file-line"><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">int64</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">uint64</span><span class="o">:</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint64</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sint64</span><span class="o">:</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint64</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">zigZagEncode64</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">fixed64</span><span class="o">:</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sfixed64</span><span class="o">:</span><span class="k">return</span> <span class="mi">8</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">bool</span><span class="o">:</span><span class="k">return</span> <span class="mi">1</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;enum&quot;</span><span class="p">]</span><span class="o">:</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;double&quot;</span><span class="p">]</span><span class="o">:</span><span class="k">return</span> <span class="mi">8</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">string</span><span class="o">:</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">calculateUTF8Bytes</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">bytes</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">remaining</span><span class="p">())</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal value for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">remaining</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot; bytes remaining&quot;</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code js-file-line"><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">remaining</span><span class="p">())</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">remaining</span><span class="p">();</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">message</span><span class="o">:</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">resolvedType</span><span class="p">.</span><span class="nx">calculate</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">group</span><span class="o">:</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">resolvedType</span><span class="p">.</span><span class="nx">calculate</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">+</span><span class="nx">k</span><span class="p">.</span><span class="nx">calculateVarint32</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="o">|</span><span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">ENDGROUP</span><span class="p">)}</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;[INTERNAL] Illegal value to encode in &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; (unknown type)&quot;</span><span class="p">);};</span><span class="nx">d</span><span class="p">.</span><span class="nx">decode</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">!=</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">wireType</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">||</span><span class="nx">a</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">LDELIM</span><span class="o">||!</span><span class="k">this</span><span class="p">.</span><span class="nx">repeated</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal wire type for field &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code js-file-line"><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; (&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">wireType</span><span class="o">+</span><span class="s2">&quot; expected)&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">WIRE_TYPES</span><span class="p">.</span><span class="nx">LDELIM</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">repeated</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">packed</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">.</span><span class="nx">PACKABLE_WIRE_TYPES</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">wireType</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">();</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">offset</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="p">.</span><span class="nx">offset</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">;)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">.</span><span class="nx">wireType</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="k">return</span> <span class="nx">d</span><span class="p">}</span><span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">int32</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">()</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">uint32</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">()</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sint32</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readVarint32ZigZag</span><span class="p">()</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">fixed32</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readUint32</span><span class="p">()</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sfixed32</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readInt32</span><span class="p">()</span><span class="o">|</span></td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code js-file-line"><span class="mi">0</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">int64</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readVarint64</span><span class="p">();</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">uint64</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readVarint64</span><span class="p">().</span><span class="nx">toUnsigned</span><span class="p">();</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sint64</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readVarint64ZigZag</span><span class="p">();</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">fixed64</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readUint64</span><span class="p">();</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">sfixed64</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readInt64</span><span class="p">();</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">bool</span><span class="o">:</span><span class="k">return</span><span class="o">!!</span><span class="nx">b</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">();</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;enum&quot;</span><span class="p">]</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">();</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;float&quot;</span><span class="p">]</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readFloat</span><span class="p">();</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;double&quot;</span><span class="p">]</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readDouble</span><span class="p">();</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">string</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">readVString</span><span class="p">();</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">bytes</span><span class="o">:</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">remaining</span><span class="p">()</span><span class="o">&lt;</span></td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code js-file-line"><span class="nx">a</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal number of bytes for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; required but got only &quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">remaining</span><span class="p">());</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">limit</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">offset</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">offset</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">d</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">message</span><span class="o">:</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">readVarint32</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">resolvedType</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">case</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">group</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">resolvedType</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)}</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;[INTERNAL] Illegal wire type for &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">);};</span><span class="nx">p</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Field</span><span class="o">=</span><span class="nx">u</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">m</span><span class="p">){</span><span class="nx">u</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">m</span><span class="p">)};</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">ExtensionField</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code js-file-line"><span class="nx">d</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">OneOf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">fields</span><span class="o">=</span><span class="p">[]};</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">m</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="o">=</span><span class="s2">&quot;Enum&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="kc">null</span><span class="p">};(</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)).</span><span class="nx">build</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">{},</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getChildren</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">Value</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="o">++</span><span class="nx">c</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">id</span><span class="p">;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="o">&amp;&amp;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;$options&quot;</span><span class="p">,{</span><span class="nx">value</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">buildOpt</span><span class="p">()});</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">a</span><span class="p">};</span><span class="nx">p</span><span class="p">.</span><span class="nx">Enum</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="o">=</span><span class="s2">&quot;Enum.Value&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">e</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code js-file-line"><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">Enum</span><span class="p">.</span><span class="nx">Value</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">field</span><span class="o">=</span><span class="nx">e</span><span class="p">};</span><span class="nx">n</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">Extension</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">m</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="o">=</span><span class="s2">&quot;Service&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">clazz</span><span class="o">=</span><span class="kc">null</span><span class="p">};(</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)).</span><span class="nx">build</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">clazz</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">clazz</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">clazz</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Builder</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">rpcImpl</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Not implemented, see: https://github.com/dcodeIO/ProtoBuf.js/wiki/Services&quot;</span><span class="p">)),</span></td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code js-file-line"><span class="mi">0</span><span class="p">)}},</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">Builder</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="s2">&quot;$options&quot;</span><span class="p">,{</span><span class="nx">value</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">buildOpt</span><span class="p">()}),</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="s2">&quot;$options&quot;</span><span class="p">,{</span><span class="nx">value</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">$options</span><span class="p">}));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getChildren</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">RPCMethod</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">)(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">try</span><span class="p">{</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">resolvedRequestType</span><span class="p">.</span><span class="nx">clazz</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">rpcImpl</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">fqn</span><span class="p">(),</span><span class="nx">c</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="nx">d</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="k">try</span><span class="p">{</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">resolvedResponseType</span><span class="p">.</span><span class="nx">clazz</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">f</span><span class="p">){}</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">resolvedResponseType</span><span class="p">.</span><span class="nx">clazz</span><span class="o">?</span></td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code js-file-line"><span class="nx">d</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span><span class="p">(</span><span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal response type received in service method &quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">))}})</span><span class="o">:</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal request type provided to service method &quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">)),</span><span class="mi">0</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="mi">0</span><span class="p">)}};</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">){(</span><span class="k">new</span> <span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">))[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">](</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">)};</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">],</span><span class="s2">&quot;$options&quot;</span><span class="p">,{</span><span class="nx">value</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">buildOpt</span><span class="p">()}),</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">],</span><span class="s2">&quot;$options&quot;</span><span class="p">,{</span><span class="nx">value</span><span class="o">:</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">].</span><span class="nx">$options</span><span class="p">}))})(</span><span class="nx">f</span><span class="p">[</span><span class="nx">m</span><span class="p">]);</span><span class="k">return</span> <span class="nx">c</span><span class="p">}(</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">)};</span><span class="nx">p</span><span class="p">.</span><span class="nx">Service</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="kd">var</span> <span class="nx">v</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code js-file-line"><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">r</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="o">=</span><span class="s2">&quot;Service.Method&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="p">{}};(</span><span class="nx">v</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)).</span><span class="nx">buildOpt</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">buildOpt</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">Method</span><span class="o">=</span><span class="nx">v</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">m</span><span class="p">){</span><span class="nx">v</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">m</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">className</span><span class="o">=</span><span class="s2">&quot;Service.RPCMethod&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">requestName</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">responseName</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">resolvedResponseType</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">resolvedRequestType</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="nx">b</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">RPCMethod</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">p</span><span class="p">}(</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">Builder</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">ns</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">resolved</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code js-file-line"><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">files</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">importRoot</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="p">{}},</span><span class="nx">r</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">reset</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">ns</span><span class="p">};</span><span class="nx">r</span><span class="p">.</span><span class="nx">define</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">||!</span><span class="nx">g</span><span class="p">.</span><span class="nx">TYPEREF</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal package: &quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="p">.</span><span class="nx">NAME</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">]))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal package: &quot;</span><span class="o">+</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">c</span><span class="p">)),</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="k">return</span> <span class="k">this</span><span class="p">};</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidMessage</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code js-file-line"><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">||!</span><span class="nx">g</span><span class="p">.</span><span class="nx">NAME</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">values</span><span class="o">||</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">rpc</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">m</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">fields</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">fields</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidMessageField</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">m</span><span class="p">]))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">id</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">f</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">d</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">enums</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">enums</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">enums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidEnum</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">enums</span><span class="p">[</span><span class="nx">m</span><span class="p">]))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span></td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code js-file-line"><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">messages</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">messages</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidMessage</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">messages</span><span class="p">[</span><span class="nx">m</span><span class="p">])</span><span class="o">&amp;&amp;!</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidExtend</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">messages</span><span class="p">[</span><span class="nx">m</span><span class="p">]))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span><span class="s2">&quot;undefined&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">extensions</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">extensions</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mi">2</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">extensions</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="s2">&quot;number&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="s2">&quot;number&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">};</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidMessageField</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">rule</span><span class="o">||</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">||</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="o">||</span><span class="s2">&quot;undefined&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="o">||!</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">RULE</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">rule</span><span class="p">)</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code js-file-line"><span class="nx">g</span><span class="p">.</span><span class="nx">NAME</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">TYPEREF</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">ID</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="p">)))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">options</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;object&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">options</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">options</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">f</span><span class="p">])</span><span class="o">||</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="s2">&quot;number&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="s2">&quot;boolean&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">d</span><span class="p">])</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidEnum</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">||!</span><span class="nx">g</span><span class="p">.</span><span class="nx">NAME</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;undefined&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">values</span><span class="o">||!</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">values</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">values</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code js-file-line"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">values</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;object&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">values</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">||</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">values</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">name</span><span class="o">||</span><span class="s2">&quot;undefined&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">values</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">id</span><span class="o">||!</span><span class="nx">g</span><span class="p">.</span><span class="nx">NAME</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">values</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">name</span><span class="p">)</span><span class="o">||!</span><span class="nx">g</span><span class="p">.</span><span class="nx">NEGID</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">values</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">id</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="nx">r</span><span class="p">.</span><span class="nx">create</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;){</span><span class="nx">b</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="k">for</span><span class="p">(;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidMessage</span><span class="p">(</span><span class="nx">f</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Message</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">options</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">isGroup</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code js-file-line"><span class="nx">g</span><span class="o">=</span><span class="p">{};</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">oneofs</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">oneofs</span><span class="p">),</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="o">++</span><span class="nx">n</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="nx">q</span><span class="p">[</span><span class="nx">n</span><span class="p">]]</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">OneOf</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">q</span><span class="p">[</span><span class="nx">n</span><span class="p">]));</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="o">++</span><span class="nx">n</span><span class="p">){</span><span class="nx">q</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">id</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Duplicate field id in message &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">q</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">options</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">options</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="o">++</span><span class="nx">h</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">])</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal field option name in message &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">q</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">q</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">]]</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code js-file-line"><span class="s2">&quot;number&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">q</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">]]</span><span class="o">&amp;&amp;</span><span class="s2">&quot;boolean&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">q</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">]])</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal field option value in message &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">q</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">q</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">]]);}</span><span class="nx">a</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">q</span><span class="p">.</span><span class="nx">oneof</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">q</span><span class="p">.</span><span class="nx">oneof</span><span class="p">],</span><span class="s2">&quot;undefined&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal oneof in message &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">q</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">q</span><span class="p">.</span><span class="nx">oneof</span><span class="p">);</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Field</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">rule</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">options</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">q</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">q</span><span class="p">)}</span><span class="nx">g</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">f</span><span class="p">.</span><span class="nx">enums</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">enums</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">enums</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">enums</span><span class="p">[</span><span class="nx">n</span><span class="p">]);</span></td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code js-file-line"><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">messages</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">messages</span><span class="p">[</span><span class="nx">n</span><span class="p">]);</span><span class="nx">f</span><span class="p">.</span><span class="nx">extensions</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">extensions</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extensions</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">ID_MIN</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">ID_MIN</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">ID_MAX</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">ID_MAX</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="o">=</span><span class="nx">d</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidEnum</span><span class="p">(</span><span class="nx">f</span><span class="p">)){</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Enum</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">options</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">values</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Enum</span><span class="p">.</span><span class="nx">Value</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">values</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">name</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">values</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">id</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">d</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidService</span><span class="p">(</span><span class="nx">f</span><span class="p">)){</span><span class="nx">d</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="LC62" class="blob-code js-file-line"><span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Service</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">options</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span> <span class="k">in</span> <span class="nx">f</span><span class="p">.</span><span class="nx">rpc</span><span class="p">)</span><span class="nx">f</span><span class="p">.</span><span class="nx">rpc</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">RPCMethod</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">rpc</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">request</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">rpc</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">response</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">rpc</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">options</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">d</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidExtend</span><span class="p">(</span><span class="nx">f</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">ref</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">id</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Duplicate extended field id in message &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">id</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">id</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">||</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">id</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">extensions</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal extended field id in message &quot;</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="LC63" class="blob-code js-file-line"><span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">id</span><span class="o">+</span><span class="s2">&quot; (&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">extensions</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot; to &quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot; expected)&quot;</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">name</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">convertFieldsToCamelCase</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Field</span><span class="p">.</span><span class="nx">_toCamelCase</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">name</span><span class="p">));</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">ExtensionField</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">rule</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">type</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">fqn</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;.&quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">id</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">options</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Extension</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">name</span><span class="p">,</span><span class="nx">q</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">extension</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">addChild</span><span class="p">(</span><span class="nx">q</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="sr">/\.?google\.protobuf\./</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">ref</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Extended message &quot;</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">ref</span><span class="o">+</span><span class="s2">&quot; is not defined&quot;</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="LC64" class="blob-code js-file-line"><span class="p">}</span><span class="k">else</span> <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Not a valid definition: &quot;</span><span class="o">+</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">f</span><span class="p">));}</span><span class="k">else</span> <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Not a valid namespace: &quot;</span><span class="o">+</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">b</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">parent</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">resolved</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">};</span><span class="nx">r</span><span class="p">[</span><span class="s2">&quot;import&quot;</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">g</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">IS_NODE</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;path&quot;</span><span class="p">).</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">g</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="nx">g</span><span class="p">])</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">(),</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">=!</span><span class="mi">0</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">imports</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">imports</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="s2">&quot;/&quot;</span><span class="p">,</span><span class="nx">k</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;object&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">g</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">importRoot</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">root</span><span class="p">,</span><span class="nx">k</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">importRoot</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">file</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">f</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;\\&quot;</span><span class="p">)</span><span class="o">||</span></td>
      </tr>
      <tr>
        <td id="L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="LC65" class="blob-code js-file-line"><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">g</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;\\&quot;</span><span class="p">))</span><span class="nx">d</span><span class="o">=</span><span class="s2">&quot;\\&quot;</span><span class="p">}</span><span class="k">else</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">g</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">importRoot</span><span class="o">?</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">importRoot</span><span class="o">:</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">g</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\/[^\/]*$/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="s2">&quot;&quot;</span><span class="o">===</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="s2">&quot;/&quot;</span><span class="p">))</span><span class="o">:</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">g</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;\\&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\\[^\\]*$/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="s2">&quot;\\&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="s2">&quot;.&quot;</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">imports</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">imports</span><span class="p">[</span><span class="nx">p</span><span class="p">]){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">f</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Cannot determine import root: File name is unknown&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">imports</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="sr">/^google\/protobuf\//</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="nx">d</span><span class="o">+</span><span class="nx">n</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="nx">n</span><span class="p">])){</span><span class="sr">/\.proto$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">.</span><span class="nx">DotProto</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\.proto$/</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="LC66" class="blob-code js-file-line"><span class="s2">&quot;.json&quot;</span><span class="p">));</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">s</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Failed to import &#39;&quot;</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">&quot;&#39; in &#39;&quot;</span><span class="o">+</span><span class="nx">g</span><span class="o">+</span><span class="s2">&quot;&#39;: File not found&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="sr">/\.json$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">n</span><span class="p">))</span><span class="k">this</span><span class="p">[</span><span class="s2">&quot;import&quot;</span><span class="p">](</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">s</span><span class="o">+</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">n</span><span class="p">);</span><span class="k">else</span> <span class="k">this</span><span class="p">[</span><span class="s2">&quot;import&quot;</span><span class="p">]((</span><span class="k">new</span> <span class="nx">c</span><span class="p">.</span><span class="nx">DotProto</span><span class="p">.</span><span class="nx">Parser</span><span class="p">(</span><span class="nx">s</span><span class="o">+</span><span class="s2">&quot;&quot;</span><span class="p">)).</span><span class="nx">parse</span><span class="p">(),</span><span class="nx">n</span><span class="p">)}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="sr">/\.(\w+)$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">g</span><span class="p">))</span><span class="k">this</span><span class="p">[</span><span class="s2">&quot;import&quot;</span><span class="p">](</span><span class="nx">b</span><span class="p">.</span><span class="nx">imports</span><span class="p">[</span><span class="nx">p</span><span class="p">],</span><span class="nx">g</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^(.+)\.(\w+)$/</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="o">+</span><span class="s2">&quot;_import&quot;</span><span class="o">+</span><span class="nx">p</span><span class="o">+</span><span class="s2">&quot;.&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">}));</span><span class="k">else</span> <span class="k">this</span><span class="p">[</span><span class="s2">&quot;import&quot;</span><span class="p">](</span><span class="nx">b</span><span class="p">.</span><span class="nx">imports</span><span class="p">[</span><span class="nx">p</span><span class="p">],</span><span class="nx">g</span><span class="o">+</span><span class="s2">&quot;_import&quot;</span><span class="o">+</span><span class="nx">p</span><span class="p">);</span><span class="k">else</span> <span class="k">this</span><span class="p">[</span><span class="s2">&quot;import&quot;</span><span class="p">](</span><span class="nx">b</span><span class="p">.</span><span class="nx">imports</span><span class="p">[</span><span class="nx">p</span><span class="p">]);</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">importRoot</span><span class="o">=</span><span class="kc">null</span><span class="p">)}</span><span class="nx">b</span><span class="p">.</span><span class="nx">messages</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="s2">&quot;package&quot;</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="s2">&quot;package&quot;</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="LC67" class="blob-code js-file-line"><span class="nx">b</span><span class="p">.</span><span class="nx">options</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">messages</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">());</span><span class="nx">b</span><span class="p">.</span><span class="nx">enums</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="s2">&quot;package&quot;</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="s2">&quot;package&quot;</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">options</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">enums</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">());</span><span class="nx">b</span><span class="p">.</span><span class="nx">services</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="s2">&quot;package&quot;</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="s2">&quot;package&quot;</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">options</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">services</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">());</span><span class="nx">b</span><span class="p">[</span><span class="s2">&quot;extends&quot;</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="s2">&quot;package&quot;</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="s2">&quot;package&quot;</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">options</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="s2">&quot;extends&quot;</span><span class="p">]),</span><span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">());</span><span class="k">return</span> <span class="k">this</span><span class="p">};</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidService</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">||!</span><span class="nx">g</span><span class="p">.</span><span class="nx">NAME</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;object&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">rpc</span><span class="p">)};</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidExtend</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">!==</span></td>
      </tr>
      <tr>
        <td id="L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="LC68" class="blob-code js-file-line"><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">ref</span><span class="o">||!</span><span class="nx">g</span><span class="p">.</span><span class="nx">TYPEREF</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ref</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">m</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">fields</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">fields</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">p</span><span class="p">.</span><span class="nx">isValidMessageField</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">fields</span><span class="p">[</span><span class="nx">m</span><span class="p">]))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">f</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">d</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">)}}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">};</span><span class="nx">r</span><span class="p">.</span><span class="nx">resolveAll</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!=</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="o">&amp;&amp;</span><span class="s2">&quot;object&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span> <span class="k">instanceof</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="o">++</span><span class="nx">m</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">m</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">resolveAll</span><span class="p">()}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span> <span class="k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="LC69" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">Field</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">TYPE</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">type</span><span class="p">))</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">type</span><span class="p">];</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="p">.</span><span class="nx">TYPEREF</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">type</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal type reference in &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span> <span class="k">instanceof</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">ExtensionField</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">extension</span><span class="p">.</span><span class="nx">parent</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">parent</span><span class="p">).</span><span class="nx">resolve</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Unresolvable type reference in &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">resolvedType</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">k</span><span class="p">.</span><span class="nx">Enum</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">[</span><span class="s2">&quot;enum&quot;</span><span class="p">];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="LC70" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">Message</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">group</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">TYPES</span><span class="p">.</span><span class="nx">message</span><span class="p">;</span><span class="k">else</span> <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal type reference in &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">type</span><span class="p">);}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span> <span class="k">instanceof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Enum</span><span class="p">.</span><span class="nx">Value</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span> <span class="k">instanceof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">Method</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span> <span class="k">instanceof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Service</span><span class="p">.</span><span class="nx">RPCMethod</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">requestName</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Message</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal type reference in &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">requestName</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">resolvedRequestType</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="LC71" class="blob-code js-file-line"><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">responseName</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Message</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal type reference in &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">responseName</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">resolvedResponseType</span><span class="o">=</span><span class="nx">b</span><span class="p">}</span><span class="k">else</span> <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal service type in &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span> <span class="k">instanceof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Message</span><span class="p">.</span><span class="nx">OneOf</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span> <span class="k">instanceof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">.</span><span class="nx">Extension</span><span class="p">))</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Illegal object in namespace: &quot;</span><span class="o">+</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ptr</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">()}};</span><span class="nx">r</span><span class="p">.</span><span class="nx">build</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">reset</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">resolved</span><span class="o">||</span></td>
      </tr>
      <tr>
        <td id="L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="LC72" class="blob-code js-file-line"><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">resolveAll</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">resolved</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="o">=</span><span class="kc">null</span><span class="p">);</span><span class="kc">null</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">ns</span><span class="p">.</span><span class="nx">build</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">]])</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">]];</span><span class="k">else</span><span class="p">{</span><span class="nx">c</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="p">};</span><span class="nx">r</span><span class="p">.</span><span class="nx">lookup</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">ns</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">ns</span><span class="p">};</span><span class="nx">r</span><span class="p">.</span><span class="nx">toString</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="s2">&quot;Builder&quot;</span><span class="p">};</span><span class="nx">p</span><span class="p">.</span><span class="nx">Message</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">p</span><span class="p">.</span><span class="nx">Service</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">return</span> <span class="nx">p</span><span class="p">}(</span><span class="nx">g</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">Lang</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">Reflect</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">newBuilder</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="p">{};</span><span class="s2">&quot;undefined&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">convertFieldsToCamelCase</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">convertFieldsToCamelCase</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="LC73" class="blob-code js-file-line"><span class="nx">g</span><span class="p">.</span><span class="nx">convertFieldsToCamelCase</span><span class="p">);</span><span class="s2">&quot;undefined&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">.</span><span class="nx">populateAccessors</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">populateAccessors</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">populateAccessors</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">g</span><span class="p">.</span><span class="nx">Builder</span><span class="p">(</span><span class="nx">c</span><span class="p">)};</span><span class="nx">g</span><span class="p">.</span><span class="nx">loadJson</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">k</span><span class="o">||</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">k</span><span class="p">.</span><span class="nx">file</span><span class="o">&amp;&amp;</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">k</span><span class="p">.</span><span class="nx">root</span><span class="p">)</span><span class="nx">t</span><span class="o">=</span><span class="nx">k</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="s2">&quot;object&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">k</span><span class="o">||</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">newBuilder</span><span class="p">());</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">c</span><span class="p">));</span><span class="nx">k</span><span class="p">[</span><span class="s2">&quot;import&quot;</span><span class="p">](</span><span class="nx">c</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">resolveAll</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">build</span><span class="p">();</span><span class="k">return</span> <span class="nx">k</span><span class="p">};</span><span class="nx">g</span><span class="p">.</span><span class="nx">loadJsonFile</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">t</span><span class="p">){</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="s2">&quot;object&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">k</span><span class="o">?</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">k</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">k</span><span class="o">||</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="kc">null</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="LC74" class="blob-code js-file-line"><span class="k">typeof</span> <span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">root</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">file</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">===</span><span class="nx">p</span><span class="p">)</span><span class="nx">k</span><span class="p">(</span><span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Failed to fetch file&quot;</span><span class="p">));</span><span class="k">else</span> <span class="k">try</span><span class="p">{</span><span class="nx">k</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">loadJson</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">p</span><span class="p">),</span><span class="nx">t</span><span class="p">,</span><span class="nx">c</span><span class="p">))}</span><span class="k">catch</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">k</span><span class="p">(</span><span class="nx">b</span><span class="p">)}});</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">Util</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="s2">&quot;object&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">root</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">file</span><span class="o">:</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="kc">null</span><span class="o">===</span><span class="nx">p</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">loadJson</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">p</span><span class="p">),</span><span class="nx">t</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span><span class="k">return</span> <span class="nx">g</span><span class="p">}</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">module</span><span class="o">&amp;&amp;</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="o">?</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;bytebuffer&quot;</span><span class="p">))</span><span class="o">:</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">([</span><span class="s2">&quot;ByteBuffer&quot;</span><span class="p">],</span><span class="nx">x</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">dcodeIO</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">dcodeIO</span><span class="o">||</span><span class="p">{}).</span><span class="nx">ProtoBuf</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">dcodeIO</span><span class="p">.</span><span class="nx">ByteBuffer</span><span class="p">)})(</span><span class="k">this</span><span class="p">);</span></td>
      </tr>
</table>

  </div>

  </div>
</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <form accept-charset="UTF-8" class="js-jump-to-line-form">
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" autofocus>
    <button type="submit" class="button">Go</button>
  </form>
</div>

        </div>

      </div><!-- /.repo-container -->
      <div class="modal-backdrop"></div>
    </div><!-- /.container -->
  </div><!-- /.site -->


    </div><!-- /.wrapper -->

      <div class="container">
  <div class="site-footer">
    <ul class="site-footer-links right">
      <li><a href="https://status.github.com/">Status</a></li>
      <li><a href="http://developer.github.com">API</a></li>
      <li><a href="http://training.github.com">Training</a></li>
      <li><a href="http://shop.github.com">Shop</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/about">About</a></li>

    </ul>

    <a href="/" aria-label="Homepage">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
    </a>

    <ul class="site-footer-links">
      <li>&copy; 2014 <span title="0.19798s from github-fe139-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="/site/terms">Terms</a></li>
        <li><a href="/site/privacy">Privacy</a></li>
        <li><a href="/security">Security</a></li>
        <li><a href="/contact">Contact</a></li>
    </ul>
  </div><!-- /.site-footer -->
</div><!-- /.container -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-suggester-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="fullscreen-contents js-fullscreen-contents js-suggester-field" placeholder=""></textarea>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped tooltipped-w" aria-label="Exit Zen Mode">
      <span class="mega-octicon octicon-screen-normal"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped tooltipped-w"
      aria-label="Switch themes">
      <span class="octicon octicon-color-mode"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <a href="#" class="octicon octicon-x flash-close js-ajax-error-dismiss" aria-label="Dismiss error"></a>
      Something went wrong with that request. Please try again.
    </div>


      <script crossorigin="anonymous" src="https://assets-cdn.github.com/assets/frameworks-1fa81495311dda5d05f593b5cbbb09acf60035a9.js" type="text/javascript"></script>
      <script async="async" crossorigin="anonymous" src="https://assets-cdn.github.com/assets/github-02f5d01f404c67172336376f4ccaf6cdc8296674.js" type="text/javascript"></script>
      
      
        <script async src="https://www.google-analytics.com/analytics.js"></script>
  </body>
</html>

